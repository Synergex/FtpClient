;;**********************************************************************
;;
;; Title:       SocketException.dbc
;;
;; Type:        Class
;;
;; Author:      Tod Phillips, Synergex Professional Services Group
;;
;; WARNING:     Neither Synergex nor the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this Code.  This header information must
;;              remain unaltered in the Code at all times.  Possession
;;              of this Code, or any modified version or part of this Code,
;;              indicates your acceptance of these terms.
;;
;;***********************************************************************************
import SynPSG.System.Net

namespace SynPSG.System.Net

.include "DBLDIR:synsock.def"

    public class SocketException extends System.ApplicationException
        private mErrorCode          ,int
        private mSocketErrorCode    ,int
        private mMessage            ,string

        ;;;<summary>
        ;;; Public Static method to throw a SocketError.
        ;;; You should use this if you want to specify a message.
        ;;;</summary>
        static public method ThrowSocketException ,void
            req in  errnum      ,int
            req in  source      ,string
            req in  message     ,string
            endparams
            record
                sError          ,@SocketException
            endrecord
        proc
                sError = new SocketException(errnum)
                sError.Source = source
                sError.mMessage = message
                throw sError
        endmethod


        ;;;<summary>
        ;;;Create a new socket
        ;;;</summary>
        public method SocketException
            endparams
        proc
            mErrorCode = 0
            mSocketErrorCode = 0
        endmethod

        ;;;<summary>
        ;;;Create a new socket
        ;;;</summary>
        public method SocketException
            req in  SocketErrorCode ,int
            endparams
        proc
            mErrorCode = 0
            mSocketErrorCode = SocketErrorCode
        endmethod

        ;;;<summary>
        ;;;</summary>
        public property ErrorCode   ,int
            method get
            proc
                mreturn mErrorCode
            endmethod
        endproperty

        ;;;<summary>
        ;;;</summary>
        public property SocketErrorCode ,int
            method get
            proc
                mreturn mSocketErrorCode
            endmethod
        endproperty

        ;;;<summary>
        ;;;</summary>
        override public property Message ,string
            method get
            proc
                mreturn mMessage
            endmethod
       endproperty

    endclass

endnamespace
